class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean vis[] = new boolean[V];
        boolean stk[] = new boolean[V];
        
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(isCyclicUtil(adj,i,vis,stk)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean isCyclicUtil( ArrayList<ArrayList<Integer>> adj,int curr,boolean vis[],boolean stk[]){
        vis[curr] = true;
        stk[curr] = true;
        for(int i=0;i<adj.get(curr).size();i++){
            Integer e = adj.get(curr).get(i);
            if(stk[e]){
                return true;
            }
            if(!vis[e] && isCyclicUtil(adj,e,vis,stk)){
                return true;
            }
        }
        stk[curr] = false;
        return false;
    }
}
