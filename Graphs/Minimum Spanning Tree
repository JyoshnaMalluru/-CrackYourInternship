class Solution {
    static class Pair implements Comparable<Pair>{
        int v;
        int cost;
        public Pair(int v,int cost){
            this.cost = cost;
            this.v = v;
        }
        
        @Override
        public int compareTo(Pair p2){
            return this.cost-p2.cost;
        }
    } 
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        // Code Here.
        boolean vis[] = new boolean[V];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int finalCost = 0;
        pq.add(new Pair(0,0));
        while(!pq.isEmpty()){
            Pair curr = pq.remove();
            if(!vis[curr.v]){
                vis[curr.v] = true;
                finalCost+=curr.cost;
                for(int []edge: adj.get(curr.v)){
                    int neighbour = edge[0];
                    int edgeCost = edge[1];
                    if(!vis[neighbour]){
                        pq.add(new Pair(neighbour,edgeCost));
                    }
                }
            }
        }
        return finalCost;
    }
}
