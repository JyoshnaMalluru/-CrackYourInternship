class Solution
{
    //Function to find out minimum steps Knight needs to reach target position.
    class Edge{
        int x;
        int y;
        int dist;
        public Edge(int x,int y,int dist){
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        // Code here
        boolean vis[][] = new boolean[N+1][N+1];
        int dx[] = {2,2,-2,-2,-1,-1,1,1};
        int dy[] = {1,-1,-1,1,2,-2,-2,2};
        Queue<Edge> q = new LinkedList<>();
        q.add(new Edge(KnightPos[0],KnightPos[1],0));
        while(!q.isEmpty()){
            Edge curr = q.remove();
            if(curr.x == TargetPos[0] && curr.y == TargetPos[1]){
                return curr.dist;
            }
            for(int i=0;i<8;i++){
                int x = curr.x+dx[i];
                int y = curr.y+dy[i];
                
                if(isValid(x,y,N) && !vis[x][y]){
                    vis[x][y] = true;
                    q.add(new Edge(x,y,curr.dist+1));
                }
            }
        }
        return Integer.MAX_VALUE;
    }
    public boolean isValid(int x,int y,int N){
        if(x>=1 && y>=1 && x <=N && y<=N){
            return true;
        }
        return false;
    }
    
}
