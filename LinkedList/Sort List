class Solution {
    ListNode mergeTwolists(ListNode a,ListNode b){
        if(a==null){
            return b;
        }else if(b == null){
            return a;
        }
        ListNode head = null;
        ListNode tail = null;

        if(a.val <= b.val){
                head = tail = a;
                a= a.next;
            }else{
                head = tail = b;
                b= b.next;
            }

        while(a != null && b != null){
            if(a.val <= b.val){
                tail.next = a;
                tail = a;
                a= a.next;
            }else{
                tail.next = b;
                tail = b;
                b= b.next;
            }
        }
        if(a == null){
            tail.next = b;
        }else{
            tail.next = a;
        }
        return head;
    }
    ListNode middle(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode mid = middle(head);
        ListNode first = head;
        ListNode second = mid.next; 
        mid.next = null;
        ListNode left = sortList(first);
        ListNode right = sortList(second);
        return mergeTwolists(left,right);
    }
}
